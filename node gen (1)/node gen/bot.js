const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');
const { SlashCommandBuilder } = require('@discordjs/builders');  // Gerekli import
const fs = require('fs');
const path = require('path');
const { token, guildId, channelIds, adminId } = require('./config.json');

// Botu baÅŸlatÄ±yoruz
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.DirectMessages
  ],
  partials: ['MESSAGE', 'CHANNEL', 'REACTION']
});

// Bot hazÄ±r olduÄŸunda Ã§alÄ±ÅŸacak kod
client.once('ready', async () => {
  console.log(`${client.user.tag} is now running!`);

  // Slash komutlarÄ± kaydet
  const commands = [
    new SlashCommandBuilder()
      .setName('gen')
      .setDescription('Hesap Genere Et')
      .addStringOption(option =>
        option.setName('type')
          .setDescription('Gen tÃ¼rÃ¼nÃ¼ seÃ§')
          .setRequired(true)
          .addChoices(
            { name: 'free', value: 'free' },
            { name: 'vip', value: 'vip' },
            { name: 'boost', value: 'boost' },
            { name: 'ultravip', value: 'ultravip' }
          )),
  ];

  try {
    await client.application.commands.set(commands, guildId); // KomutlarÄ± yalnÄ±zca belirli bir sunucuda kaydediyoruz
    console.log('Komutlar baÅŸarÄ±yla kaydedildi!');
  } catch (error) {
    console.error('KomutlarÄ± kaydederken bir hata oluÅŸtu:', error);
  }
});

// Komut iÅŸleyicisi
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  if (interaction.commandName === 'gen') {
    const type = interaction.options.getString('type'); // Parametreyi al

    let fileName = '';
    let isVip = false, isBoost = false, isUltravip = false;

    if (type === 'free') {
      fileName = 'free.txt';
    } else if (type === 'vip') {
      fileName = 'vip.txt';
      isVip = true;
    } else if (type === 'boost') {
      fileName = 'boost.txt';
      isBoost = true;
    } else if (type === 'ultravip') {
      fileName = 'ultravip.txt';
      isUltravip = true;
    } else {
      return interaction.reply({ content: 'GeÃ§ersiz seÃ§enek. LÃ¼tfen `free`, `vip`, `boost`, veya `ultravip` seÃ§eneÄŸini girin!', ephemeral: true });
    }

    // Kanal ve rol kontrolÃ¼
    if (!checkChannelAndRole(interaction, isVip, isBoost, isUltravip)) {
      return;
    }

    // HesaplarÄ± gÃ¶nderme iÅŸlemi
    await sendAccount(interaction, fileName, isVip, isBoost, isUltravip);
  }
});

// Hesap gÃ¶nderme iÅŸlemi
async function sendAccount(interaction, fileName, isVip = false, isBoost = false, isUltravip = false) {
  const userId = interaction.user.id;

  try {
    const filePath = path.join(__dirname, fileName);
    const accounts = fs.readFileSync(filePath, 'utf-8').split('\n').filter(account => account.trim());

    if (accounts.length === 0) {
      return interaction.reply({ content: 'Stokta hesap kalmadÄ±!', ephemeral: true });
    }

    const selectedAccount = accounts.splice(Math.floor(Math.random() * accounts.length), 1)[0];

    // HesabÄ± dosyadan silme ve dosyayÄ± gÃ¼ncelleme
    fs.writeFileSync(filePath, accounts.join('\n'));

    // KullanÄ±cÄ±ya DM ile hesap gÃ¶nderme
    await interaction.user.send(`HesabÄ±nÄ±z: ${selectedAccount}`);

    // Embed mesajÄ±nÄ± oluÅŸturma
    const embed = new EmbedBuilder()
      .setTitle(`${interaction.guild.name}`)
      .setDescription(`ðŸ“¦ Kalan Stok --> ${accounts.length}\nâœ… Hesap BaÅŸarÄ±yla DM'den Ä°letildi!`)
      .setColor(0x00FF00); // YeÅŸil renk

    // ButonlarÄ± oluÅŸturma
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setLabel(isBoost ? 'Boost Hesap' : isVip ? 'VIP Hesap' : isUltravip ? 'UltraVIP Hesap' : 'Normal Hesap')
        .setStyle(isBoost ? ButtonStyle.Secondary : isFree ? ButtonStyle.Danger : isUltravip ? ButtonStyle.Danger : ButtonStyle.Primary) // Boost ve Free renkleri deÄŸiÅŸtirildi
        .setCustomId('button-1')  // custom_id ekleyin
    );

    // EÄŸer zaten bir yanÄ±t verildiyse, yeni bir yanÄ±t gÃ¶ndermeyin
    if (!interaction.replied) {
      // Embed mesajÄ±nÄ± gÃ¶nderiyoruz
      await interaction.reply({ embeds: [embed], components: [row] });
      console.log("Embed mesajÄ± gÃ¶nderildi.");
    } else {
      // EÄŸer etkileÅŸime yanÄ±t verildiyse, `followUp` kullanÄ±n
      await interaction.followUp({ embeds: [embed], components: [row] });
    }

    // Cooldown ekleme
    setCooldown(userId, isVip, isBoost, isUltravip);

  } catch (error) {
    console.error('Hesap gÃ¶nderme hatasÄ±:', error);
    await interaction.reply({ content: 'Hesap gÃ¶nderme sÄ±rasÄ±nda bir hata oluÅŸtu.', ephemeral: true });
  }
}

// Kanal ve rol kontrolÃ¼
function checkChannelAndRole(interaction, isVip, isBoost, isUltravip) {
  const userId = interaction.user.id;
  const channelId = interaction.channel.id;

  // VIP, Boost ve UltraVIP rol kontrolÃ¼
  if (isUltravip && !interaction.member.roles.cache.some(role => role.name === 'Ultra Vip Gen') && userId !== adminId) {
    return interaction.reply({ content: 'UltraVIP Gen rolÃ¼nÃ¼z yok!', ephemeral: true });
  }
  if (isVip && !interaction.member.roles.cache.some(role => role.name === 'Vip Gen') && userId !== adminId) {
    return interaction.reply({ content: 'Vip Gen rolÃ¼nÃ¼z yok!', ephemeral: true });
  }
  if (isBoost && !interaction.member.roles.cache.some(role => role.name === 'Boost Gen') && userId !== adminId) {
    return interaction.reply({ content: 'Boost Gen rolÃ¼nÃ¼z yok!', ephemeral: true });
  }

  // Kanal kontrolÃ¼
  if (isUltravip && channelId !== channelIds.ultravip) {
    return interaction.reply({ content: 'Bu komut sadece UltraVIP kanalÄ±nda kullanÄ±labilir!', ephemeral: true });
  }
  if (isVip && channelId !== channelIds.vip) {
    return interaction.reply({ content: 'Bu komut sadece VIP kanalÄ±nda kullanÄ±labilir!', ephemeral: true });
  }
  if (isBoost && channelId !== channelIds.boost) {
    return interaction.reply({ content: 'Bu komut sadece Boost kanalÄ±nda kullanÄ±labilir!', ephemeral: true });
  }
  if (!isUltravip && !isVip && !isBoost && channelId !== channelIds.normal) {
    return interaction.reply({ content: 'Bu komut sadece Normal kanalÄ±nda kullanÄ±labilir!', ephemeral: true });
  }

  return true;
}

// Cooldown fonksiyonu (geÃ§ici bekleme)
const cooldowns = {};

function setCooldown(userId, isVip, isBoost, isUltravip) {
  let cooldownTime = 1800; // Default cooldown (Normal) = 30 dakika

  if (isVip) cooldownTime = 1200;  // VIP cooldown = 20 dakika
  if (isBoost) cooldownTime = 900;  // Boost cooldown = 15 dakika
  if (isUltravip) cooldownTime = 600;  // UltraVIP cooldown = 10 dakika

  const currentTime = Date.now();
  cooldowns[userId] = currentTime + cooldownTime * 1000;
  setTimeout(() => delete cooldowns[userId], cooldownTime * 1000);  // Cooldown bitince temizle
}

client.login(token);
